[[{"i":"introduction-to-kontainers","l":"Introduction to \"Kontainers\""},{"l":"Usage"},{"l":"Run existing Docker containers securely in Docker and Kubernetes using Kontain"},{"l":"Installing Kontain"},{"l":"Image size benefits if using full capabilities of Kontain"},{"l":"Introduction","p":["Kontain is a new secure runtime for Docker and Kubernetes that:","runs Containers in Docker and Kubernetes with VM-level hardware isolation","works as a secure runtime alongside default runtime in Docker and Kubernetes","uses normal Docker and Kubernetes tooling and CI/CD systems/processes","provides instant start capabilities for your functions and microservices thus providing better experience and ability to reduce your Opex"]},{"i":"why","l":"Why?","p":["We are rapidly progressing towards a world of decentralized computing where applications are broken down into hundreds of connected microservices and significant computing power is being pushed to the edges of the network.","The key characteristics for enabling this new era are: Instantaneous Scale-out capabilities, low resource/cost usage, with high density and most importantly security for these computing services.","The current Unit of computing workloads is a \"Container\" that is bloated, inefficient, insecure and vulnerable, running on a shared kernel with a huge attack surface that needs to be secured using various highly complex mechanisms in a multi-tenant cloud environment, thus contributing to DevSecOps risks and complexities.","We need a new unit for Computing Workloads for this new era, a new type of \"Container\"."]},{"i":"a-secure-smaller-faster-unit-of-computing-workloads-for-the-new-era---introducing-kontainer","l":"A secure, smaller, faster unit of computing workloads for the new Era - Introducing \"Kontainer\"","p":["Introducing \"Kontainer\", a Docker-comptabile \"Container\" that retains all the advantages and tooling of Docker/Containers while having none of the issues above.","A Kontainer supports almost instantaneous startup, eliminates resource bloat, works in highly dense computing environments, supports all the important runtimes, and importantly, is highly secure with almost no attack surface and strong isolation boundaries.","In addition, it works with no changes to current source code, and works with all the DevOps and CI/CD tooling, and Orchestration systems available today.","Please see Install Guide to start using \"Kontainers\"."]}],[{"l":"Quick start"},{"l":"Description","p":["You can use Kontain to run existing or new Docker Images standalone or in Kubernetes with","secure VM-level hardware isolation","reduce resource usage by building smaller Container images to reduce resource consumption","and enable instant start capabilities for your slower starting contianers in Docker and Kubernetes"]},{"l":"Install Kontain and run existing Docker Container images with Kontain","p":["Assuming that you are on a Linux system (either Ubuntu 20.04 or Amazon Linux 2 with Kernel version 5.10 or above or Fedora 34 and above) with KVM enabled, and Docker installed, we can install Kontain witn the following command:","For more details, you can view the examples or view the docs for each language using the links below. Kontain examples repo","For more details on Install: Install Kontain in Linux","For more details to install Kontain as a secure runtime in Kubernetes: Install Kontain in Kubernetes","Below we will some examples of how to use Kontain with golang, Java Spring Boot, Python Flask and NodeJS without changing any of your existing Docker or Kubernetes workflows."]},{"i":"using-kontain-with-golang-http-server-docker-container","l":"Using Kontain with Golang http server (Docker Container)","p":["Kontain and Go (Docker and Kubernetes)"]},{"i":"using-kontain-with-a-java-spring-boot-service-docker-container","l":"Using Kontain with a Java Spring boot service (Docker Container)","p":["Using Kontain with Java/Spring Boot (Docker and Kubernetes)"]},{"i":"using-kontain-with-a-python-flask-service-docker-container","l":"Using Kontain with a Python Flask service (Docker Container)","p":["Using Kontain with Python/Flask (Docker and Kubernetes)"]},{"i":"using-kontain-with-a-nodejs-hello-world-http-service-docker-container","l":"Using Kontain with a NodeJS hello world http service (Docker Container)","p":["Using Kontain with NodeJS express service (Docker and Kubernetes)"]},{"i":"using-kontains-base-images-to-enjoy-the-full-benefits-of-smaller-containers-and-lower-resources","l":"using Kontain's base images to enjoy the full benefits of smaller containers and lower resources","p":["Kontain can run existing Containers as is, but these can lead to bloated containers that are huge in size and consume significant computing resources when run.","Although optional, usage of Kontain's base images and enhanced build steps during the Container build process can produce significantly reduced image sizes.","Please note that the image size for the the base node image has a size of 918MB whereas the Kontain based Application container image is 84.2MB because Kontain's base node image is significantly smaller","More examples of the benefits of using Kontain base images:"]},{"l":"Using Kontain with docker-compose","p":["Using Kontain with docker-compose example","See below for an example. Note the use of the Kontain runtime stanza (runtime: krun) in the docker-compose yaml file. This is the same as using --runtime=krun in the CLI and shows how easy it is to use Kontain with your regular development tools."]},{"l":"Using Kontain with Kubernetes","p":["Using Kontain with Kubernetes example","Below is an example of using Kontain with Kubernetes.","In the app kubernetes manifest below, you will notice the \"runtime: kontain\" stanza.","You will see that this enables Kontain launched containers to be deployed and run in Kubernetes alongside regular Docker or other Containers."]}],[{"l":"Introduction"},{"l":"Kontain","p":["“Inside every large program is a small program struggling to get out.”— Tony Hoare","It’s a misconception to think of Containers as a way of securely isolating their deployments. Rather, containers are a ‘packaging technology’.","How do you secure Containers and containerised deployments? However Containers can actually be isolated to avoid the security risks that they create.","Kontain was founded on the insight that 2013-era containers are far too insecure, slow, and bloated for the demands of the 2020s as explained here.","Kontain creates strongly isolated containers with fortress-strong security isolation, thousands of times faster startup, and vastly smaller footprint.","Kontain is fully integrated with Docker and Kubernetes with a OCI and CRI compliant approach, and requiring no changes to source code, CI, or DevOps tooling.","To use Kontain, view the Install Guide","test"]},{"i":"a-new-approach-with-no-change-in-code-or-devops-tooling","l":"A new approach (with no change in code or DevOps tooling)","p":["A new approach to Containers but fully integrated with Docker and Kubernetes. With the current ongoing tectonic shift to cloud-based shared tenant, microservice based architectures, where containers, VMs all run on shared cloud hardware, it is time that these microservices are packaged into strongly isolated, secure, specialized packages that only includes the application code and just the required OS code and nothing more to run fast and securely on the shared multi-tenant cloud hardware with strong isolation. It almost literally packages and employs only the functions needed to make an application work, and nothing more.","This sort of packaging into a minimalistic unikernel image allows the application to leverage a Single Address Space, Single Process model and run at screaming speeds. There is no context switching, so the Application almost runs at the speed of the host Operating system. Some more advantages are outlined here. This enables it to be secure by nature since they do not share a kernel and present a minimal to no attack surface at the OS level.","A unikernel is a single-address-space machine image that contains an application workload—the program you want to run in a container—combined with a minimal set of library functions which provide the OS services required to run the workload. This approach comes with a ton of advantages in terms of: Security - highly secure, isolated, minimal attack surface packages in multi-tenant environments Shared-nothing architecture with very high density Speed - almost instantaneous startup time (in milliseconds rather than seconds) Resource consumption reduced by orders of magnitude - compute and size Really Immutable packages of code","This Docker workflow/tools compatible approach offers huge advantages in the following areas:","For packaging microservices in minimalistic, fast, secure containers","Functions as a service without the security, startup downsides Scale to zero with instantaneous startup time","IOT where security, speed, resource size are critical","Edge computing","Anyplace where security, speed, cost and resource constraints are a high priority"]},{"i":"fast-secure-minimal-resources","l":"Fast, secure, minimal resources","p":["You can watch the video from Abhay Bhargav, the founder of Application Security Company, we45, talk about security aspects of Containers and Unikernels."]}],[{"l":"Docker Integration Overview"},{"l":"Kontain Integration with Docker","p":["Kontain integrates with Docker by adding itself as a runtime in Containerd. Containerd supports multiple runtimes and thus a Kontain container can be launched and used using the same Docker CLI and tools that Docker uses.","Below we show what the integration with Docker looks like:","test","Kontain also maintains a set of Docker images as listed here."]}],[{"l":"Kubernetes Integration Overview"},{"l":"Kontain Integration with Kubernetes","p":["Since Kontain is OCI Compatible like Docker, we can also use it with any distribution of Kubernetes that supports Containerd or CRI-O runtimes, and use familiar Kubernetes development and CI/CD workflows and tools to deploy Kontain-based Images as pods.","Below we show how a kubelet in a Kubernetes Worker node interacts with an implementation of the CRI (Containerd or CRI-O) to launch OCI compatible containers. Below we show how Kontain’s krun interacts with the CRI implementations to launch containers in Kubernetes.","Below we show how kubelet on Kubernetes worker nodes works with CRI implementation runtimes (Containerd and CRI-O) and OCI to support multiple runtimes.","Kubelet CRI and OCI","Kontain's 'krun' can work with either Containerd or CRI-O runtimes that manage the complete container lifecycle. Below we show more details on how this works.","kubelet krun","CRI krun"]}],[{"l":"FAQ"},{"i":"does-kontain-run-docker-containers-without-modifications","l":"Does Kontain run Docker containers without modifications?","p":["Yes, it runs Docker containers without any modifications securely.","But if you would like more benefits, you can leverage Kontain's smaller resources/image sizes capabilities with a little bit more effort in your Dockerfile construction, and can also use its instant start capabilities for your slower containers."]},{"i":"how-do-i-run-a-docker-container-using-kontain","l":"How do I run a Docker Container using Kontain?","p":["Kontain runs whenever used as a runtime in docker or Kubernetes. The following is an example of this:","Here is an example of Kontain in docker-compose, and in Kubernetes"]},{"i":"which-languages-does-it-support","l":"Which languages does it support?","p":["The Default is English (United States), but it is not language dependent, so should work anywhere where Docker or Kubernetes works."]},{"i":"can-it-run-on-my-desktop","l":"Can it run on my desktop?","p":["Yes, you can with the following Linux Operating Systems. If you are running Ubuntu 20.04 or above or Fedora 34 or above or Amazon Linux 2 with Kernel version 5.10 or above, it is very easy to install Kontain.","If you ensure that you have docker pre-installed, you can just use:","For more detailed instructions, you can refer to this link.","For running on a Windows 10 or above desktop, you can use Vagrant with Hyper-V as outlined here","For running on a Mac OS desktop, you can use brew to install Vagrant and install Kontain as outlined here"]},{"i":"how-does-it-work","l":"How does it work?","p":["Kontain works by adding a secure CRI-compliant Container runtime to Containerd, that is used by both Docker and Kubernetes to run containers.","By working with Containerd, the user just has to specify –runtime=krun in Docker or runtime:kontain in Kubernetes for a container to run in Kontain alongside other containers."]},{"i":"where-can-i-use-it-or-what-platforms-does-it-run-on","l":"Where can I use it or What platforms does it run on?","p":["Kontain runs anywhere that Linux, Docker and Kubernetes runs, including AWS, Azure and Google Cloud and on-premises installations. It can be installed as a secure runtime for Docker/Containerd in desktops, VMs, Kubernetes."]},{"i":"is-it-easy-to-install","l":"Is it easy to install?","p":["As seen above, so long as you are running the requisite OS with KVM enabled and docker installed, it is very easy to install."]},{"i":"how-do-i-use-it-easily-in-2-minutes","l":"How do I use it easily in 2 minutes?","p":["Once you have it installed as shown above, you can use it to run a docker container as shown below:"]},{"i":"why-should-i-use-it-over-docker-for-running-my-container","l":"Why should I use it over Docker for running my container?","p":["Kontain:","secures a container with VM-level hardware isolation","provides smaller images thus consuming less resources,","without changing your CI/CD workflow/tools.","In addition, it provides instant start capabilities for your slow starting Docker containers.","Also, it runs alongside Docker containers in Docker-compose and Kubernetes, hence you can try out Kontain incrementally."]},{"i":"does-it-work-with-docker-compose","l":"Does it work with docker-compose?","p":["Yes, you just have to add the line “runtime: krun” to docker-compose.yaml file. Here’s an example of Kontain in a docker-compose.yml file. It can run side by side with existing Docker containers, so you don’t have to run Here’s an example of Kontain in a Kubernetes manifest. It runs side by side with Docker containers."]},{"i":"is-it-open-source","l":"Is it open source?","p":["Yes"]},{"i":"is-it-free-to-try-and-use","l":"Is it free to try and use?","p":["Yes"]}],[{"l":"Video Tutorials"},{"l":"Demonstrating Ease of use"},{"l":"Quick Install"},{"l":"Running existing Docker Containers"},{"i":"detailed-install-steps-docker-kubernetes","l":"Detailed Install steps (Docker, Kubernetes)"},{"l":"Check Pre-requisites for Kontain","p":["asciicast"]},{"l":"Installing Kontain in Docker","p":["asciicast"]},{"i":"installing-kontain-in-kubernetes-containerd","l":"Installing Kontain in Kubernetes (Containerd)","p":["asciicast"]},{"i":"python-flask-and-kontain-docker-kubernetes","l":"Python Flask and Kontain (Docker, Kubernetes)"},{"l":"Using Kontain with Python Flask App and Docker","p":["asciicast"]},{"l":"Checking vulnerabilities in Kontain-based Python Flask App","p":["asciicast"]},{"l":"Using Kontain with Python Flask and Kubernetes","p":["asciicast"]},{"i":"java-spring-boot-and-kontain-docker-kubernetes","l":"Java Spring Boot and Kontain (Docker, Kubernetes)"},{"l":"Using Kontain with Java Spring Boot","p":["asciicast"]},{"l":"Checking vulnerabilities in Kontain-based Spring Boot App","p":["asciicast"]},{"l":"Using Kontain with Java Spring Boot and Kubernetes","p":["asciicast"]}],[{"i":"install-linux","l":"Install (Linux)","p":["Examples"]},{"l":"Pre-requisites","p":["Kontain runs on Linux kernel version 4.15 or newer, running on Intel VT (vmx) or AMD (svm) with KVM based virtualization enabled, ideally:","Ubuntu 20.04 or higher, or Fedora 34 or higher Amazon Linux 2 VM with kernel version 5.10 or higher Recommended distros are Ubuntu 20.04 and Fedora 32, or newer. Note that this also assumes that your user has access to /dev/kvm.","Please note that although Kontain also runs on platforms that do not offer access to Nested Virtualization by using a Software Virtualization Module.","If Docker is not present, you can install Docker On Fedora/RHEL systems using instructions from here or for Ubuntu using these instructions.","To ensure a smooth install, we recommend updating your OS:"]},{"l":"Install Kontain"},{"l":"Verify Kontain install"},{"l":"Using Kontain with different Languages","p":["For more details see Using Kontain with Java","For impelementation details, you can see: Java Examples","For more details see Using Kontain with Python","For impelementation details, you can see: Python Examples","For more details see Using Kontain with Go","For impelementation details, you can see: Golang example","For more details see Using Kontain with Javascript/NodeJS","For impelementation details, you can see: JS/NodeJS example"]},{"l":"Using examples for more details","p":["You can see the Kontain guide examples for more details on how to use Kontain in Kubernetes and docker-compose."]}],[{"l":"Installing in Kubernetes"},{"l":"Pre-requisites for Kubernetes Worker node to run Kontain","p":["Kontain runs on Linux kernel version 4.15 or newer, running on Intel VT (vmx) or AMD (svm) with KVM based virtualization enabled, ideally Ubuntu or Fedora. For enabling KVM on Ubuntu 18.04 or higher, you can refer to this article.","For Kubernetes platforms that do not offer nested virtualization like GKE and AWS, we use a software virtualization module that gets installed as part of the Kontain install. For other platforms that do offer nested virtualization, we recommend using the regular Kontain install.","Recommended distros for Kubernetes Worker Nodes are Ubuntu 20.04 and Amazon Linux 2, or newer.","To package Kontain images, it is also necessary to have a recent version of Docker or Moby-engine is installed.","contains instructions for launching various versions of Kubernetes For trying out Kontain with Kubernetes, you can launch Minikube with Docker Desktop view instructions here.","or Minikube:"]},{"l":"Install Kontain using Daemonset in Kubernetes","p":["Deploy Kontain Runtime using the Kubernetes client CLI","The above yaml contains the Kontain runtime class and the install scripts for the Daemonset to be installed."]},{"l":"Verify Install","p":["Let's run a Kontain test app to verify that the runtime class is working as designed","If you wish to view the Kontain Daemonset:"]},{"i":"installing-in-cloud-kubernetesopenshift","l":"Installing in Cloud Kubernetes/Openshift","p":["Deploy Kontain Runtime using the Kubernetes client CLI","The above yaml contains the Kontain runtime class and the install scripts for the Daemonset to be installed.","To install Kontain on AWS (with containerd) or GKE use:","The above installs the Kontain runtime class and contains the libraries for installing Kontain using the daemonset.","As Docker shim is being deprecated in AWS EKS, please note that to use Kontain on AWS EKS, you will need to launch the cluster using containerd as the default runtime. Please see: Docker shim deprecation","To enable containerd as default rutime, please see: Enabling Containerd in EKS","To install Kontain on K3s:","To install Kontain on Openshift or Minikube with CRIO:"]},{"i":"using-kontain-to-deploy-java-python-golang-and-js-examples-in-kubernetes","l":"Using Kontain to deploy Java, Python, Golang and JS examples in Kubernetes","p":["examples"]}],[{"i":"python-flask-and-fastapi-dockercomposek8s","l":"Python Flask and FastAPI (Docker/Compose/K8s)"},{"l":"Example of using Kontain with a Python Flask-based Service","p":["This example shows how to build, push, run a Python Flask based microservice in a Kontain container in Docker and Kubernetes.","The implementation of this example is here along with instructions to build and run this example."]},{"l":"to build this example"},{"l":"see image sizes","p":["Please note that the Kontain based container is 23.5MB in size versus the \"Slim\" python-slim base container"]},{"l":"to run this example"},{"l":"to run this example in docker-compose"},{"l":"to run this example in kubernetes"},{"l":"Example of using Kontain with a Python FastAPI-based Service","p":["This example shows how to build, push, run a Python FastAPI based microservice in a Kontain container in Docker and Kubernetes.","The difference between this and the Flask API based example is that we run the Docker image as is without any conversion to Kontain based containers, but yet provide a secure environment. Thus this does not reduce the size but enables the convenience of using current containers as-is without any changes.","The implementation of this example is here along with instructions to build and run this example."]},{"i":"to-build-this-example-1","l":"to build this example"},{"i":"to-run-this-example-1","l":"to run this example"},{"l":"invoke the service","p":["$ curl -v http://localhost:5000","$ docker stop fastapi-hello"]},{"l":"to run this example kubernetes"},{"l":"reference","p":["https://fastapi.tiangolo.com/deployment/docker/"]}],[{"i":"go-docker-compose-kubernetes","l":"Go (Docker, Compose, Kubernetes)","p":["This is a go based example of using Kontain to build, push, run a secure Kontain container in Docker and Kubernetes.","The implementation of this example is here."]},{"l":"to build this example"},{"l":"see image sizes","p":["Note that the kontainguide/golang-http-hello image is 6.2MB whereas the base golang imageis 964MB."]},{"l":"to run this example"},{"l":"to run this example in docker-compose"},{"l":"to run this example in kubernetes"}],[{"i":"javascript-and-node-expressjs","l":"Javascript and Node (ExpressJS)","p":["This example shows how to build, push, run a NodeJS based app in a Kontain container in Docker and Kubernetes.","implementation of this example"]},{"l":"to build this example"},{"l":"see image sizes for benefits of using Kontain base image","p":["Please note that the image size for the Kontain based container is 84.2MB versus the base node image has a size of 918MB"]},{"l":"to run this example"},{"l":"to run this example in docker-compose"},{"l":"to run this example in kubernetes"}],[{"i":"java-spring-boot-in-dockercomposek8s","l":"Java (Spring Boot) in Docker/Compose/K8s"},{"l":"Example of using Kontain with a Spring Boot Microservice","p":["Below is an example of packaging and running a Spring Boot Application as a Kontain based Container and run in Docker, Compose and Kubernetes.","The implementation of this example is here along with instructions to build and run the example in Docker, compose and kubernetes."]},{"l":"to build this example"},{"l":"see image sizes","p":["Please note the image size of the base container at 422MB and that of the Kontain container at 197MB."]},{"l":"to run this example"},{"l":"to run this example in docker-compose"},{"l":"to run this example in kubernetes"}],[{"i":"kontain-with-spring-boot-microservice-using-mysql-in-dockercompose","l":"Kontain with Spring Boot Microservice using MySQL in Docker/Compose","p":["This example shows Kontain running a Spring Boot REST API example with a backing MySQL DB. The REST API persists entries in a MySQL DB, and the API is also be used to retrieve the entries.","Reference from: https://www.bezkoder.com/docker-compose-spring-boot-mysql/ and https://www.bezkoder.com/spring-boot-jpa-crud-rest-api/","The implementation of this example is here.","Please note that this shows that we can continue to use the normal Dockerfile without any conversion to using Kontain-based language runtime.","This allows us to experience Kontain with existing Dockerfiles and images, BUT, without the benefit of smaller image sizes."]},{"l":"to build this example"},{"l":"to run this example","p":["The REST API should be ready at port 8080"]},{"l":"to test using the REST APIs","p":["Now add 2 entries via the REST API","Now retrieve the entries via the REST API"]},{"l":"to clean"}],[{"l":"Instantly starting your Spring Boot Application","p":["implementation of this example is here","How many times have you wished that your Spring Boot Java microservice would start instantaneously without any delay whatsoever? How many times did you wish you could scale down your Java Containers with faith that you would be able to relaunch them in an instant during a spike in request load. If only a big heavy JVM could start as quick as those other language runtimes? How many times did you wish you had tiny Java microservices that could be launched instantly on an event, respond to the event and shut down.","Did you wish you could shut down your service and launch it only when necessary without any \"warm\" up time?","Well, read on to see how we can do this with Kontain Containers.","The implementation of this example is here along with instructions to build and run the example in Docker."]},{"l":"Video demo"},{"l":"starting a Spring Boot Application the normal way"},{"i":"starting-a-spring-boot-microservice-the-instant-way","l":"starting a Spring Boot microservice the \"instant\" way"},{"i":"how-do-we-dothis","l":"How do we do this?"},{"l":"Install Kontain","p":["To install Kontain on your Linux machine, you can follow the steps in the guide. Please note that you need a recent version of Fedora or Ubuntu OS (Linux kernel version 4.15 or newer) for this as specified in the guide."]},{"l":"Reviewing the Spring Boot Application","p":["We will use a simple Spring Boot application as our example as shown below:"]},{"l":"Dockerfile","p":["Its Dockerfile:"]},{"l":"Build and Run","p":["To build the code and the container, we can do:","To run using Docker:","As you can see, it takes a few seconds (about 9–10 seconds) before the Spring Boot Application starts up and is ready.","Now, let's serve a request from this Container just to verify."]},{"i":"using-an-instastart-container","l":"Using an \"Instastart\" Container"},{"i":"prep-for-creating-an-instastart-container","l":"Prep for creating an \"Instastart\" Container","p":["Now let's restart the application container with a few other parameters so that we can create an alternate \"instantly\" starting container for the same Spring Boot Application.","In 1 terminal do:"]},{"i":"creating-an-instastart-container","l":"Creating an \"Instastart\" Container","p":["In another terminal do: Now let's take an Application Container Snapshot and copy it so as to create an \"Instastart\" container.","This will generate a kmsnap file with a re-usable Application Snapshot. Note that KM will report it as saving a core dump, since core dumps and snapshots have the same format and are generated using the same mechanism.","Then it packages up the Snapshot as an \"Instastart\" Container. This bundles the Application Snapshot into a new Docker container that can be used to \"instantly\" run the Spring Boot application."]},{"i":"running-the-instastart-container","l":"Running the \"Instastart\" Container","p":["Now let's start up the \"Instastart\" Container:","You will notice that the container starts up instantly (with almost all of the overhead being Docker startup cost) and that the request gets a response \"instantly\" as well."]},{"l":"Conclusion","p":["\"Instastart\" provides a rather amazing opportunity for Java Spring Boot Containers to be scaled down to 0 during times when there are no events or when there no customers waiting for a request, and provides a way to respond \"Instantly\" and scale up when the request load suddenly spikes."]}],[{"i":"knative-serverless","l":"knative (serverless)","p":["knative examples","This section shows how we can use Kontain in a serverless or funtions as a service environment to secure Functions using hardware virtualization based workload isolation.","We can use the same guide-examples gihub repo to see the files associated with this example as linked to above."]},{"l":"Description","p":["This describes how to use Kontain with KNative. It shows you how to:","install KNative in a kind cluster","and install Kontain","deploy and run a KNative service that uses a secure Kontain Container to run the function"]},{"l":"Starting a knative kind cluster with Kontain"},{"l":"Installing knative kind quickstart plugins on your local desktop","p":["Note that this has to be done only once. Also, please note that this has to be done on an OS that satisfies the pre-requisites for Kontain as shown earlier."]},{"l":"Starting the kind cluster with knative and kontain installed"},{"l":"Working with KNative Kontain-enabled services"},{"l":"Deploy the service","p":["The service manifest file: hello-kontain-svc.yml"]},{"l":"Invoke the service"},{"l":"Deploy an update to the service with a revision","p":["The revised service manifest file:","hello-kontain-svc-revised.yml"]},{"l":"Check for traffic being routed to current revision"},{"i":"canary-service-deployment-50-to-revision","l":"Canary service deployment: 50% to revision","p":["The service manifest wwith the traffic split direct for revisions:","hello-kontain-svc-traffic-split.yml"]},{"l":"Working with KNative Kontain-enabled Spring Boot service"},{"l":"From scale to zero state to starting up to respond to a request","p":["At first, we will show the regular spring boot knative service running, and replying to a request from scale to zero state."]},{"i":"from-scale-to-zero-state-to-response-using-a-snapshot-of-the-spring-boot-service","l":"From scale to zero state to response, using a Snapshot of the Spring Boot service","p":["Now, we will show the same spring boot knative service in scale to zero state, and then starting up to reply to a request from scale to zero state."]}],[{"l":"Kontain Base Images for Docker","p":["Kontain maintains Base Docker Images for major languages at Docker Hub. The ones that we currently maintain are listed below:","Python 3.9","Python 3.8","Dynamic Python 3.8","JDK 11","Java 11","NodeJS 12.4","We will continue adding newer base images for Kontain based development."]}],[{"l":"Image Tagging and Docker Registries","p":["You can use the regular Docker commands to tag and image","You can use Docker pull and Docker push to work with the any Docker registry (local registry, Docker Hub, AWS ECR, Google Compute GCR, Azure ACR) in the same manner as regular Docker images."]}],[{"l":"Using Kontain on AWS EC2"},{"i":"using-a-kontain-ami-amazon-linux-2-os","l":"Using a Kontain AMI (Amazon Linux 2 OS)","p":["You can launch an AWS EC2 instance with Kontain pre-installed using the AMI id:","ami-029f3a63da2a4503a(kontain-v0.1test-amzn2-ami-kernel-5.10-hvm-2.0.20220121.0-x86_64-gp2) in us-west-2 region.","This AMI is based on the latest Amazon Linux 2 AMI and has Kontain v0.9.5 pre-installed. You will need to select your own instance type, default VPC, subnets, IAM roles for your instance. After you launch your own instance you can try out the examples in the docs below.","We can also easily add other AMIs based on AMI preference types on feedback."]},{"i":"or-install-on-your-own-amazon-linux-2-based-aws-ec2-vm","l":"Or, Install on your own Amazon Linux 2 based AWS EC2 VM","p":["Please note that this requires an Amazon Linux 2 based VM with Kernel version above 5.10.","Instructions summarized from here"]}],[{"i":"install-on-mac-vagrant","l":"Install on Mac (Vagrant)"},{"l":"Installing on Mac OS X","p":["Developers can try out Kontain on Mac OS X using any virtualization software that can run Linux with a modern Kernel version greater than 4.15. Below we show one of the easier ways to do this using Vagrant from HashiCorp software."]},{"l":"Pre-requisite for installing Vagrant","p":["At this point, you need to have a computer capable of Nested Virtualization.","You also need to turn on Nested Virtualization in VirtualBox"]},{"l":"Installing Vagrant on the Mac OS X","p":["To install the 64-bit version of Vagrant, you need to download it and install:","If you want more details on installing Vagrant they are here."]},{"l":"Run Kontain in Ubuntu","p":["After installing Vagrant, we can now use it to run a Ubuntu 18.04 Linux VM that will automatically install the latest version of Kontain.","Below we show the steps we use to launch a Vagrant VM with Kontain:","Hopefully, this gets you started on trying out Kontain on the Mac using Vagrant.","Please note that if you want to test out Kontain with docker-compose on Vagrant, please see the instructions in the Vagrantfile."]},{"l":"The Vagrantfile","p":["Here is the link to the Vagrantfile used to create a self-provisioning Vagrant VM with Kontain installed."]}],[{"i":"install-on-windows-vagrant","l":"Install on Windows (Vagrant)"},{"l":"Installing on Windows 10 and above","p":["Developers can try out Kontain on Windows 10 Pro or above using any virtualization software that can run Linux with a modern Kernel version greater than 4.15. Below we show one of the easier ways to do this using Vagrant from HashiCorp software."]},{"i":"pre-requisite-turn-on-hyper-v","l":"Pre-requisite: turn on Hyper-V","p":["You need to have nested virtualization turned on in your BIOS to be able to install Vagrant.","You also need to turn on Hyper-V as Vagrant will use the built-in Hyper-V's virtualization capabilities.","To turn on Hyper-V virtualization in Windows, you may need to go to the Control Panel, and use the \"Turn on Windows features\". Please see the screenshots below.","Turn on Windows Features","Turn on Hyper-V"]},{"l":"Installing Vagrant on Windows 10","p":["To install the 64-bit version of Vagrant, you need to download it and install from here."]},{"l":"Run Vagrant VM","p":["After installing Vagrant, we can now use it to run a Ubuntu 18.04 Linux VM.","To run a Vagrant VM, you need to first launch the Windows Command Prompt in Administrative mode as shown in the screenshot below: starting cmd terminal","Below we show the steps we use to run a Vagrant VM with Kontain on Windows:","Hopefully, this gets you started on trying out Kontain on Windows and using Vagrant.","Please note that if you want to test out Kontain with docker-compose on Vagrant, please see the instructions in the Vagrantfile."]},{"l":"The Vagrantfile","p":["Here is the link to the Vagrantfile used to create a self-provisioning Vagrant VM with Kontain installed."]}],[{"l":"Kontain vs similar technologies"},{"l":"Kontain compared to regular Linux Containers vs Firecracker vs gVisor and others","p":["Below we have outlined some important concise information and differences on the System Architectures of Kontain vs gVisor and Firecracker, and how Kontain provides both security and high performance without any tradeoffs between the two.","For a summary 1-pager document on this, please see here"]},{"i":"kontain-kontainer","l":"Kontain \"Kontainer\"","p":["A Kontain \"Kontainer\" allows you to have the best combination of Performance, Strong Isolation and Security of Virtualization as well as a minimal footprint along with compatibility with Docker based tooling used to package and run Linux Containers.","Kontain leverages a tiny footprint Virtual Machine Monitor (Kontain Monitor) which has an extremely minimalistic design that bundles the Application code with just the minimal set of System code just enough to run the Application in the same address space. This enables the Application to startup faster than regular Linux Containers while also running extremely fast without context-switching to a OS Kernel.","This very significantly reduces the attack surface area and with strong VM-level isolation significatnly reduces the blast radius.","Fig 1. A Traditional VM virtualization Architecture","Fig 2. Kontain System Architecture","Fig 3. Packaging and running Kontain \"Kontainers\""]},{"l":"Pros","p":["More secure and faster than Linux Containers while keeping compatibility with Docker and Kubernetes tooling and packaging","Strong Security and isolation using same Virtualization techniques as regular VMs but with severely limited virtual hardware","Minimum footprint thus significantly reducing attack surface[Add link to container size]","high performance and smaller/minimal footprint without sacrificing performance compared to Linux Containers","Targeting support for microservice/functions as a service model","Fully compatible with Docker-based Tooling and Kubernetes thus requiring no change in Code or DevOps Tools","Very thin redirector (less than 200 lines of code)","handles faults, signals and system calls","Very tiny footprint Virtual Monitor (KM)","Kontain Monitor (KM) creates and configures the VMs","Better security than containers, better performance than VMs","No forced choice between performance and safety","No unnecessary hardware support other than CPU and Memory thus removing this attack vector","No support for BIOS and booting"]},{"l":"Cons","p":["Not trying to support monolithic legacy software","No GPU support yet"]},{"l":"Firecracker","p":["Firecracker is used by Amazon to run their AWS Lambda and other workloads."]},{"i":"pros-1","l":"Pros","p":["Alternative to QEMU, Slimmed down VM with full Linux Kernel that’s run using Linux KVM","Provides most “Heavy” OS/VM capabilities, does not use a shared Kernel (assuming you choose to run only one workload inside the VM, but you could still run >1 container inside a single Firecracker VM)","Provides VM-level strong isolation using KVM hypervisor-based virtualized hardware","Provides OS-level services like a regular VM, though it has a smaller footprint than a regular VM","Starts up much faster than a regular VM, but slower than a Linux Container"]},{"i":"cons-1","l":"Cons","p":["Does not use traditional Docker or Kubernetes based packaging to create OS images that also packages the application","Provides a full OS thus increasing the attack surface vs Kontain, and if you run >1 workload per Firecracker VM increases the blast radius","Smaller footprint than regular OS-based VM but ultimately you need a firecracker VM image in VM formats (qcow2, vhd etc.)","Startup time includes minimal VM services startup time","To speed up Application startup time to optimize for running Lambda functions, AWS possibly bundles some secret sauce that may not be included in Open source version."]},{"l":"gVisor","p":["gVisor is used by Google to run their CloudRun functions and other workloads."]},{"i":"pros-2","l":"Pros","p":["Lighter weight than a full-blown VM","Uses a Completely different approach to isolation, using user space to sandbox and implement system calls thus not using a shared kernel","Is available as a runtime within Docker, thus able to use Docker tooling","Can deploy to Kubernetes","Performance and Complexity increases since its an implementation of the kernel in Userland"]},{"i":"cons-2","l":"Cons","p":["Application code is run using 200,000+ lines of Golang code that implements the system calls of the Linux kernel","So stronger security than Containers but likely to have lower performance, hence causing a tradeoff in security vs performance choice","User space implementation choice has a performance cost over regular Docker containers as supported by their own documentation possibly because of context-switching between gVisor components and the host kernel","Reports of performance costs even compared to packaging and running applications in VMs","Has to context switch between system kernel and gVisor components"]}],[{"l":"Log4J Shell Attack Mitigation with Kontain"},{"l":"Blog entry","p":["Here is a blog entry discussing in detail the Log4jShell attack with and without Kontain based containers."]},{"l":"Spring Boot Application in a Docker Container getting compromised","p":["Video showing how a Spring Boot Application gets compromised with a reverse shell when packaged and run as a Docker Container, when attacked using Log4JShell attack","Attacker can execute shell commands in the container asciicast"]},{"l":"Spring Boot Application in a Kontain based Container getting sandboxed","p":["Video showing how a Spring Boot Application when packaged and run as a Kontain based Container, and when attacked using Log4JShell, and even if compromised due to Log4J, the attacker cannot do anything asciicast"]}],[{"l":"Minikube CRI-O"},{"l":"Using Kontain in Minikube with CRI-O","p":["Minikube is a great little Kubernetes distribution that can be used to verify Kontain working with Vanilla Kubernetes distributions. Usually, Minikube comes with VirtualBox in order to create the relevant Kubernetes Master and Worker nodes. But, Minikube can also launch in Docker in Docker (DIND) mode, where it launches quickly in Docker, where the Master and Worker nodes are plain Docker containers."]},{"l":"Minikube cluster with CRI-O","p":["For this, Kontain needs a minimum version of Minikube, which can be installed from here","To start Minikube use:"]},{"l":"Using Kontain with CRI-O Minikube","p":["Now we can use the instructions here to install and use Kontain."]},{"l":"Clean up","p":["You can remove the Minikube cluster by using the following:"]}],[{"i":"using-kontain-in-minikube-with-containerd","l":"Using Kontain in Minikube (with Containerd)","p":["Minikube is a great little Kubernetes distribution that can be used to verify Kontain working with Vanilla Kubernetes distributions."]},{"l":"Start Minikube with Containerd as default runtime","p":["For this, Kontain needs a minimum version of Minikube, which can be installed from here","To start Minikube use:","Now we can use the instructions here to install and use Kontain."]},{"l":"Clean up","p":["You can remove the Minikube cluster by using the following:"]}],[{"l":"SSH into K8s nodes"},{"l":"SSH into K8s nodes","p":["To ssh into K8s worker nodes for checking pre-requisites or debugging purposes, you can use the following command:","For more details: Kubernetes Azure Google Cloud"]}],[{"l":"Launching an AKS cluster","p":["Below we describe how we can launch and use Kontain in an Azure AKS (Kubernetes) cluster."]},{"l":"Starting up an AKS cluster"},{"l":"Login to Azure","p":["Here, we assume that you have Azure CLI installed have an Azure AKS account and are able to use the Azure CLI to be able to login to AKS using either:","Note: This approach may not work with Microsoft accounts or accounts that have two-factor authentication enabled."]},{"l":"AKS Kubernetes cluster with Nested Virtualization","p":["Below is an example of starting a kubernetes cluster in US-West region 1.","As a reference, the various instances available in Azure are outlined here.","We use an instance type that enables use of \"Nested\" Virutalization using KVM, and in case of Azure, the minimum instance that enables this is \"Standard_D4s_v3\"."]},{"l":"Install Kontain","p":["Please refer to: Install Kontain in Kubernetes"]},{"l":"Clean up"}],[{"l":"k3s multi-node cluster lab"},{"l":"Overview","p":["Below we use Vagrant to start a multi-node K3s cluster to test Kontain in K3s using Vagrant and libvirt as a provider since we are enabling nested virtualization using KVM.","A more common use-case is to use VirtualBox as the Vagrant provider, but we haven't really so that will be left as an exercise for the user.","To install Kontain in K3s, we use the instructions from here"]},{"l":"Requirements for Lab cluster with nested virtualization","p":["We would need a Linux (ideally, Ubuntu or Fedora/Centos) machine with KVM virtualization installed as outlined here","After that, we installed Vagrant with libvirt as the provider as outlined here."]},{"i":"bring-up-the-cluster-vagrant-up-helper-script","l":"Bring up the cluster: vagrant up helper script","p":["We provide a helper script below to install the server (master/control plane) node at first, and then to install the worker nodes (known as agents)."]},{"l":"kubectl","p":["After bringng up the multi-node k3s cluster in Vagrant, you can use the following to run kubectl commands on the cluster:"]},{"l":"The files"},{"l":"save server details script"},{"l":"VagrantFile","p":["The Vagrant file that stands up both the Server VM and Agent VM (worker node) is given below:"]},{"l":"Server Provisioning script","p":["The server provisioning script referred to in the Vagrantfile is given below:"]},{"l":"Agent Provisioning script","p":["The agent provisioning script referred to in the Vagrantfile is given below:"]}]]